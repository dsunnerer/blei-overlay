--- ./build/moz.configure/lto-pgo.configure	2021-04-15 21:44:26.000000000 +0200
+++ ./build/moz.configure/lto-pgo.configure-mod	2021-04-22 07:07:00.635507848 +0200
@@ -272,7 +272,7 @@ def lto(
             #
             # https://github.com/llvm/llvm-project/blob/e7694f34ab6a12b8bb480cbfcb396d0a64fe965f/llvm/lib/Target/X86/X86.td#L1165-L1187
             if target.cpu == "x86_64":
-                ldflags.append("-mllvm:-mcpu=x86-64")
+                ldflags.append("-mllvm:-mcpu=native")
             # We do not need special flags for arm64.  Hooray for fixed-length
             # instruction sets.
         else:
@@ -296,8 +296,6 @@ def lto(
             ldflags.append("-mllvm:-import-instr-limit=10")
         elif target.os == "OSX":
             ldflags.append("-Wl,-mllvm,-import-instr-limit=10")
-        elif c_compiler.type == "clang":
-            ldflags.append("-Wl,-plugin-opt=-import-instr-limit=10")
 
         # If we're using the new pass manager, we can also enable the new PM
         # during LTO. Further we can use the resulting size savings to increase
@@ -311,7 +309,6 @@ def lto(
                     ldflags.append("-mllvm:-import-hot-multiplier=30")
             elif select_linker.KIND != "ld64" and c_compiler.type == "clang":
                 ldflags.append("-Wl,-plugin-opt=new-pass-manager")
-                ldflags.append("-Wl,-plugin-opt=-import-hot-multiplier=30")
 
     return namespace(
         enabled=enabled,
