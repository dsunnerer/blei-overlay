From 2b02f9f0bec21f95652afae4b98127c00b28b02f Mon Sep 17 00:00:00 2001
From: "P. Jung" <ptr1337@cachyos.org>
Date: Sat, 4 Dec 2021 04:03:31 +0000
Subject: [PATCH] f2fs-add

Signed-off-by: P. Jung <ptr1337@cachyos.org>
---
 fs/f2fs/Kconfig | 19 +++++++++++++++++++
 kernel/sys.c    | 24 ++++++++++++++++++++++++
 2 files changed, 43 insertions(+)

diff --git a/fs/f2fs/Kconfig b/fs/f2fs/Kconfig
index 7eea3cfd894d..09e5336d99df 100644
--- a/fs/f2fs/Kconfig
+++ b/fs/f2fs/Kconfig
@@ -142,3 +142,22 @@ config F2FS_IOSTAT
 	  Support getting IO statistics through sysfs and printing out periodic
 	  IO statistics tracepoint events. You have to turn on "iostat_enable"
 	  sysfs node to enable this feature.
+
+config F2FS_REPORT_FAKE_KERNEL_VERSION
+	bool "Report fake kernel version to fsck.f2fs"
+	depends on F2FS_FS
+	help
+	  fsck.f2fs forces a filesystem fix on boot if it detects that the current
+	  kernel version differs from the one saved in the superblock, which results in
+	  fsck taking a long time to run. This option provides a way to report a
+	  constant fake kernel version to fsck to avoid triggering the version check.
+
+	  If unsure, say N.
+
+config F2FS_FAKE_KERNEL_RELEASE
+	string "Kernel release for fsck.f2fs"
+	depends on F2FS_REPORT_FAKE_KERNEL_VERSION
+
+config F2FS_FAKE_KERNEL_VERSION
+	string "Kernel version for fsck.f2fs"
+	depends on F2FS_REPORT_FAKE_KERNEL_VERSION
diff --git a/kernel/sys.c b/kernel/sys.c
index 8fdac0d90504..070ccebf377f 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -1269,6 +1269,28 @@ static int override_release(char __user *release, size_t len)
 	return ret;
 }
 
+static int override_version(struct new_utsname __user *name)
+{
+#ifdef CONFIG_F2FS_REPORT_FAKE_KERNEL_VERSION
+	int ret;
+
+	if (strcmp(current->comm, "fsck.f2fs"))
+		return 0;
+
+	ret = copy_to_user(name->release, CONFIG_F2FS_FAKE_KERNEL_RELEASE,
+			   strlen(CONFIG_F2FS_FAKE_KERNEL_RELEASE) + 1);
+	if (ret)
+		return ret;
+
+	ret = copy_to_user(name->version, CONFIG_F2FS_FAKE_KERNEL_VERSION,
+			   strlen(CONFIG_F2FS_FAKE_KERNEL_VERSION) + 1);
+
+	return ret;
+#else
+	return 0;
+#endif
+}
+
 SYSCALL_DEFINE1(newuname, struct new_utsname __user *, name)
 {
 	struct new_utsname tmp;
@@ -1283,6 +1305,8 @@ SYSCALL_DEFINE1(newuname, struct new_utsname __user *, name)
 		return -EFAULT;
 	if (override_architecture(name))
 		return -EFAULT;
+	if (override_version(name))
+		return -EFAULT;
 	return 0;
 }
 
-- 
2.34.1

