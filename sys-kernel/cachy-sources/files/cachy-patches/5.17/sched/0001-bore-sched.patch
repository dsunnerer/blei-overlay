From 7bb5d163ac466f430a19665278cc2b8ec69e7b54 Mon Sep 17 00:00:00 2001
From: Peter Jung <admin@ptr1337.dev>
Date: Tue, 19 Apr 2022 10:52:51 +0000
Subject: [PATCH] bore-sched

Signed-off-by: Peter Jung <admin@ptr1337.dev>
---
 include/linux/sched.h   |  3 +++
 init/Kconfig            | 20 ++++++++++++++++++++
 kernel/sched/core.c     | 11 +++++++++++
 kernel/sched/debug.c    |  5 +++++
 kernel/sched/fair.c     | 30 ++++++++++++++++++++++++++++++
 kernel/sched/features.h | 11 +++++++++++
 kernel/sched/sched.h    |  5 +++++
 7 files changed, 85 insertions(+)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 87f25432fa6b..3d0eaaafd54e 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -575,6 +575,9 @@ struct sched_entity {
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
+#ifdef CONFIG_SCHED_BORE
+	u64				burst_time;
+#endif // CONFIG_SCHED_BORE
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	int				depth;
diff --git a/init/Kconfig b/init/Kconfig
index d5aebf11d2ae..555e00fbcd11 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1282,6 +1282,26 @@ config CHECKPOINT_RESTORE
 
 	  If unsure, say N here.
 
+config SCHED_BORE
+	bool "Burst-Oriented Response Enhancer"
+	default y
+	help
+	  In Desktop and Mobile computing, one might prefer interactive
+	  tasks to keep responsive no matter what they run in the background.
+
+	  Enabling this kernel feature modifies the scheduler to discriminate
+	  tasks by their burst time (runtime since it last went sleeping or
+	  yielding state) and prioritize those that run less bursty.
+	  Such tasks usually include window compositor, widgets backend,
+	  terminal emulator, video playback, games and so on.
+	  With a little impact to scheduling fairness, it may improve
+	  responsiveness especially under heavy background workload.
+
+	  You can turn it off by writing NO_BURST_PENALTY to sched/features.
+	  Enabling this feature implies NO_GENTLE_FAIR_SLEEPERS by default.
+
+	  If unsure say Y here.
+
 config SCHED_AUTOGROUP
 	bool "Automatic process group scheduling"
 	select CGROUPS
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 32c281e1dbb2..1d2b3fdc0edf 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -45,6 +45,10 @@ EXPORT_TRACEPOINT_SYMBOL_GPL(sched_update_nr_running_tp);
 
 DEFINE_PER_CPU_SHARED_ALIGNED(struct rq, runqueues);
 
+#ifdef CONFIG_SCHED_BORE
+unsigned char  __read_mostly sysctl_sched_burst_reduction_bits_fork = 0;
+#endif // CONFIG_SCHED_BORE
+
 #ifdef CONFIG_SCHED_DEBUG
 /*
  * Debugging: various feature bits
@@ -4243,6 +4247,9 @@ static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+#ifdef CONFIG_SCHED_BORE
+	p->se.burst_time >>= sysctl_sched_burst_reduction_bits_fork;
+#endif // CONFIG_SCHED_BORE
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
@@ -9321,6 +9328,10 @@ void __init sched_init(void)
 	BUG_ON(&dl_sched_class + 1 != &stop_sched_class);
 #endif
 
+#ifdef CONFIG_SCHED_BORE
+	printk(KERN_INFO "BORE (Burst-Oriented Response Enhancer) CPU Scheduler modification 1.2.28.0 by Masahito Suzuki");
+#endif // CONFIG_SCHED_BORE
+
 	wait_bit_init();
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index cc06e81a9e61..da7e8ed2d425 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -316,6 +316,11 @@ static __init int sched_init_debug(void)
 
 	debugfs_create_u32("latency_warn_ms", 0644, debugfs_sched, &sysctl_resched_latency_warn_ms);
 	debugfs_create_u32("latency_warn_once", 0644, debugfs_sched, &sysctl_resched_latency_warn_once);
+#ifdef CONFIG_SCHED_BORE
+	debugfs_create_u16("burst_penalty_scale", 0644, debugfs_sched, &sysctl_sched_burst_penalty_scale);
+	debugfs_create_u8("burst_reduction_bits_deq", 0644, debugfs_sched, &sysctl_sched_burst_reduction_bits_deq);
+	debugfs_create_u8("burst_reduction_bits_fork", 0644, debugfs_sched, &sysctl_sched_burst_reduction_bits_fork);
+#endif // CONFIG_SCHED_BORE
 
 #ifdef CONFIG_SMP
 	debugfs_create_file("tunable_scaling", 0644, debugfs_sched, NULL, &sched_scaling_fops);
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index cda222a0930e..5ff0eb57f9c5 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -19,6 +19,9 @@
  *
  *  Adaptive scheduling granularity, math enhancements by Peter Zijlstra
  *  Copyright (C) 2007 Red Hat, Inc., Peter Zijlstra
+ *
+ *  Burst-Oriented Response Enhancer (BORE) CPU Scheduler
+ *  Copyright (C) 2021 Masahito Suzuki <firelzrd@gmail.com>
  */
 #include "sched.h"
 
@@ -106,6 +109,11 @@ static unsigned int normalized_sysctl_sched_wakeup_granularity	= 1000000UL;
 
 const_debug unsigned int sysctl_sched_migration_cost	= 500000UL;
 
+#ifdef CONFIG_SCHED_BORE
+unsigned short __read_mostly sysctl_sched_burst_penalty_scale = 1176;
+unsigned char  __read_mostly sysctl_sched_burst_reduction_bits_deq = 3;
+#endif // CONFIG_SCHED_BORE
+
 int sched_thermal_decay_shift;
 static int __init setup_sched_thermal_decay_shift(char *str)
 {
@@ -864,6 +872,9 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	struct sched_entity *curr = cfs_rq->curr;
 	u64 now = rq_clock_task(rq_of(cfs_rq));
 	u64 delta_exec;
+#ifdef CONFIG_SCHED_BORE
+	u32 msb, logbt, burst_score;
+#endif // CONFIG_SCHED_BORE
 
 	if (unlikely(!curr))
 		return;
@@ -885,6 +896,19 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
+#ifdef CONFIG_SCHED_BORE
+	curr->burst_time += delta_exec;
+	if(sched_feat(BURST_PENALTY)) {
+		msb = fls64(curr->burst_time);
+		logbt = msb ? msb - 1 : 0;
+		burst_score = (((logbt << 10) | ((curr->burst_time << (64 - (logbt
+		  ? logbt : 1))) >> 54)) * sysctl_sched_burst_penalty_scale) >> 20;
+		curr->vruntime += mul_u64_u32_shr(
+			calc_delta_fair(delta_exec, curr),
+			sched_prio_to_wmult[min(burst_score, (u32)39)], 22);
+	}
+	else
+#endif // CONFIG_SCHED_BORE
 	curr->vruntime += calc_delta_fair(delta_exec, curr);
 	update_min_vruntime(cfs_rq);
 
@@ -5736,6 +5760,9 @@ static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 	for_each_sched_entity(se) {
 		cfs_rq = cfs_rq_of(se);
 		dequeue_entity(cfs_rq, se, flags);
+#ifdef CONFIG_SCHED_BORE
+		se->burst_time >>= sysctl_sched_burst_reduction_bits_deq;
+#endif // CONFIG_SCHED_BORE
 
 		cfs_rq->h_nr_running--;
 		cfs_rq->idle_h_nr_running -= idle_h_nr_running;
@@ -7400,6 +7427,9 @@ static void yield_task_fair(struct rq *rq)
 	struct task_struct *curr = rq->curr;
 	struct cfs_rq *cfs_rq = task_cfs_rq(curr);
 	struct sched_entity *se = &curr->se;
+#ifdef CONFIG_SCHED_BORE
+	se->burst_time >>= sysctl_sched_burst_reduction_bits_deq;
+#endif // CONFIG_SCHED_BORE
 
 	/*
 	 * Are we the only task in the tree?
diff --git a/kernel/sched/features.h b/kernel/sched/features.h
index 1cf435bbcd9c..f4ffb0dc8dd5 100644
--- a/kernel/sched/features.h
+++ b/kernel/sched/features.h
@@ -1,10 +1,21 @@
 /* SPDX-License-Identifier: GPL-2.0 */
+#ifdef CONFIG_SCHED_BORE
+/*
+ * Discriminate tasks by their burst time and prioritize those
+ * that run less bursty.
+ */
+SCHED_FEAT(BURST_PENALTY, true)
+#endif // CONFIG_SCHED_BORE
 /*
  * Only give sleepers 50% of their service deficit. This allows
  * them to run sooner, but does not allow tons of sleepers to
  * rip the spread apart.
  */
+#ifdef CONFIG_SCHED_BORE
+SCHED_FEAT(GENTLE_FAIR_SLEEPERS, false)
+#else // CONFIG_SCHED_BORE
 SCHED_FEAT(GENTLE_FAIR_SLEEPERS, true)
+#endif // CONFIG_SCHED_BORE
 
 /*
  * Place new tasks ahead so that they do not starve already running
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index e8a5549488dd..5dd2a68c5f1c 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2411,6 +2411,11 @@ extern unsigned int sysctl_sched_idle_min_granularity;
 extern unsigned int sysctl_sched_wakeup_granularity;
 extern int sysctl_resched_latency_warn_ms;
 extern int sysctl_resched_latency_warn_once;
+#ifdef CONFIG_SCHED_BORE
+extern unsigned short sysctl_sched_burst_penalty_scale;
+extern unsigned char sysctl_sched_burst_reduction_bits_deq;
+extern unsigned char sysctl_sched_burst_reduction_bits_fork;
+#endif // CONFIG_SCHED_BORE
 
 extern unsigned int sysctl_sched_tunable_scaling;
 
-- 
2.36.0.rc2.10.g1ac7422e39

